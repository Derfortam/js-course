"use strict"
/*
–ó–∞–¥–∞—á–∞ 1. –î–∞–Ω–æ –∫–ª–∞—Å PhoneNumber.
–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ string, 
–ø—Ä–∏ —è–∫–æ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä (050‚Ä¶.  ü°™ MTC, 096‚Ä¶ ü°™ Kyivstar, ‚Ä¶.)
*/
class PhoneNumber {
   constructor(number) {
      this.number = number
   }
   indetifyNumber(number) {
      let result
      const mtc = /\b050/
      const kyivstar = /\b096/
      if (mtc.test(number)) result = "MTC"
      else if (kyivstar.test(number)) result = "Kyivstar"
      else result = "Something new)"
      return result
   }
   [Symbol.toPrimitive](hint) {
      let result
      switch (hint) {
         case "string":
            result = `${this.number} -> ${this.indetifyNumber(this.number)}`
            break
         default:
            result = null
            break
      }
      return result
   }
}

const randomNumber = new PhoneNumber("05043443235")
console.log(String(randomNumber))

console.log()
console.log()

// ================================================================================================================
/*
–ó–∞–¥–∞—á–∞ 2. –î–∞–Ω–æ Shop  -- –∫–ª–∞—Å, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ 
(–º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ –∫–ª–∞—Å—É Product (–Ω–∞–∑–≤–∞, —Ü—ñ–Ω–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å). 
–î–æ–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –∫–ª–∞—Å—É Shop, —â–æ–± –ø—Ä–∏ —ñ—Ç–µ—Ä—É–≤–∞–Ω–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–≤–æ–¥–∏–≤—Å—è —Ä—è–¥–æ–∫ ¬´—Ç–æ–≤–∞—Ä-–∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å¬ª
*/
class Product {
   constructor(name, price, value) {
      this.name = name
      this.price = price
      this.value = value
   }
   [Symbol.toPrimitive](hint) {
      let result
      switch (hint) {
         case "string":
            result = this.name
            break
         case "number":
            result = this.price
            break
         default:
            result = null
            break
      }
      return result
   }
}
const listOfProducts = [
   new Product("PC-34", 13000, 32),
   new Product("Aiphone", 45000, 102),
   new Product("Audi", 390000, 19),
   new Product("Rolex", 500000, 32),
   new Product("Asus Laptop", 18000, 100),
]
class Shop {
   constructor(listProduct) {
      this.listProduct = listProduct
   }
   [Symbol.iterator]() {
      this.currentIndex = 0
      return this
   }
   next() {
      if (this.currentIndex < this.listProduct.length) {
         let product = this.listProduct[this.currentIndex]
         let sum = product.price * product.value
         this.currentIndex++
         return {
            done: false,
            value: {
               productName: product.name,
               totalSum: sum,
            },
         }
      }
      return {done: true}
   }
}

const shop = new Shop(listOfProducts)

for (const item of shop) {
   console.log(item)
}
console.log()
console.log()

// ================================================================================================================
/*
–ó–∞–¥–∞—á–∞ 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –±–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –ø–æ—Å—Ç—É–ø–æ–≤–æ –≥–µ–Ω–µ—Ä—É–≤–∞–≤ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª.
*/

function* generateRandomNumbers(length, border) {
   let result = []
   while (result.length < length) {
      const randomNumber = Math.floor(Math.random() * border)
      if (randomNumber % 2 === 0) result.push(randomNumber)
   }
   yield result
}
const generator = generateRandomNumbers(5, 100)
for (let num of generator) {
   console.log(num)
}
console.log()
console.log()

// ================================================================================================================
/*
–ó–∞–¥–∞—á–∞ 4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–¥–∏–Ω –∑ –ê–†–Ü 
https://github.com/public-apis/public-apis#animals
—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—é fetch –æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
*/

fetch("https://api.thecatapi.com/v1/images/search?limit=10")
   .then(response => response.json())
   .then(data => {
      const image = document.querySelector("#image")
      data.forEach(elem => {
         const img = document.createElement("img")
         img.setAttribute("src", elem.url)
         image.append(img)
      })
   })
   .catch(err => {
      const image = document.querySelector("#image")
      image.innerHTML = "Error! –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ"
   })
   .finally(() => {
      alert("–î—è–∫—É—î–º–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")
   })
